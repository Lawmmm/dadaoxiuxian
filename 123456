<!DOCTYPE html>
<html lang="zh-CN">
<head>
<meta charset="UTF-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no"/>
<title>大道修仙·最终版</title>
<style>
*{margin:0;padding:0;box-sizing:border-box;font-family:-apple-system,BlinkMacSystemFont,"Helvetica Neue",Helvetica,"PingFang SC",sans-serif}
body{background:#000;color:#eee;display:flex;flex-direction:column;height:100vh;overflow:hidden}
header{height:48px;background:#111;display:flex;align-items:center;justify-content:space-between;padding:0 12px;font-size:20px;font-weight:bold;color:#ffd700}
main{flex:1;display:flex;flex-direction:column}
.page{display:none;flex-direction:column;flex:1;overflow-y:auto;padding:10px}
.page.active{display:flex}
.tabbar{display:flex;background:#111;border-top:1px solid #333}
.tabbar button{flex:1;border:none;background:none;color:#999;padding:10px 0;font-size:14px;cursor:pointer}
.tabbar button.active{color:#ffd700;border-bottom:2px solid #ffd700}
.card{background:#1a1a1a;border-radius:8px;margin-bottom:10px;padding:12px}
.card h3{color:#ffd700;margin-bottom:6px;font-size:16px}
.row{display:flex;justify-content:space-between;margin:4px 0;font-size:14px}
.bar{height:6px;background:#333;border-radius:3px;margin:4px 0;overflow:hidden}
.bar div{height:100%;background:linear-gradient(90deg,#667eea,#764ba2);transition:width .3s}
.btn{background:linear-gradient(135deg,#667eea,#764ba2);color:#fff;border:none;border-radius:6px;padding:12px;margin:4px 0;font-size:16px;cursor:pointer}
.log{font-size:12px;background:#111;border-radius:4px;padding:6px;max-height:120px;overflow-y:auto;margin-top:6px}
.item{display:inline-block;background:#222;border-radius:4px;padding:6px 8px;margin:4px;font-size:12px}
.pet{display:flex;align-items:center;margin:10px 0}
.pet img{width:50px;height:50px;margin-right:10px}
.pet-info{flex:1}
.back-btn{position:absolute;top:10px;right:10px;background:rgba(0,0,0,0.5);color:#fff;border:none;border-radius:4px;padding:5px 10px;cursor:pointer;font-size:12px}
</style>
</head>
<body>
<header><span>大道修仙</span><span id="realmTitle">练气·一层</span></header>

<main>
  <!-- 主页 -->
  <section id="pageMain" class="page active">
    <div class="card">
      <h3>个人</h3>
      <div class="row"><span id="realmText">境界：练气·一层</span></div>
      <div class="row"><span id="expText">修为：0 / 100</span></div>
      <div class="bar"><div id="expBar" style="width:0%"></div></div>
      <div class="row"><span id="stoneText">灵石：0</span></div>
      <div class="row"><span id="petText">灵宠：无</span></div>
      <button class="btn" onclick="cultivate()">修炼</button>
      <button class="btn" onclick="explore()">历练</button>
      <button class="btn" onclick="resetGame()">重置游戏</button>
    </div>
    <div class="card"><h3>背包</h3><div id="bag"></div></div>
    <div class="card"><h3>日志</h3><div class="log" id="logBox"></div></div>
  </section>

  <!-- 坊市 -->
  <section id="pageMarket" class="page">
    <button class="back-btn" onclick="switchTab('pageMain')">返回主页</button>
    <div class="card"><h3>鸿蒙坊市</h3><div id="marketList"></div></div>
  </section>

  <!-- GodMod -->
  <section id="pageDev" class="page">
    <button class="back-btn" onclick="switchTab('pageMain')">返回主页</button>
    <div class="card">
      <h3>GodMod 控制台</h3>
      <div><label>增加修为：<input type="number" id="expInput" value="1000000"></label><button class="btn" onclick="gmAddExp()">增加修为</button></div>
      <div><label>增加灵石：<input type="number" id="stoneInput" value="1000000"></label><button class="btn" onclick="gmAddStone()">增加灵石</button></div>
      <div><label>增加物品：<select id="itemSelect"><option value="筑基丹">筑基丹</option><option value="金元丹">金元丹</option><option value="元婴丹">元婴丹</option></select></label><button class="btn" onclick="gmAddItem()">增加物品</button></div>
    </div>
  </section>

  <!-- 底部导航 -->
  <div class="tabbar">
    <button class="active" onclick="switchTab('pageMain')">主页</button>
    <button onclick="switchTab('pageMarket')">坊市</button>
    <button onclick="switchTab('pageDev')">GodMod</button>
  </div>
</main>

<script>
/* ============ 数据 ============ */
const DATA = {
  realms: ['练气·一层','练气·二层','练气·三层','练气·圆满','筑基·初期','筑基·中期','筑基·后期','筑基·圆满','金丹·初期','金丹·中期','金丹·后期','金丹·圆满','元婴·初期','元婴·中期','元婴·后期','元婴·圆满','化神·初期','化神·中期','化神·后期','化神·圆满','合体·初期','合体·中期','合体·后期','合体·圆满','大乘·初期','大乘·中期','大乘·后期','大乘·圆满','散仙·一转','散仙·九转','真仙·初期','真仙·中期','真仙·后期','真仙·圆满','金仙·初期','金仙·中期','金仙·后期','金仙·圆满','太乙·初期','太乙·中期','太乙·后期','太乙·圆满','大罗·初期','大罗·中期','大罗·后期','大罗·圆满','准圣·初期','准圣·中期','准圣·后期','准圣·圆满','圣人·初期','圣人·中期','圣人·后期','圣人·圆满','天道·初期','天道·中期','天道·后期','天道·圆满','大道·初期','大道·中期','大道·后期','大道·圆满','世界·本身','宇宙·主宰','多元·永恒'],
  items: {'筑基丹': {price: 100, eff: 1000}, '金元丹': {price: 10000, eff: 100000}, '元婴丹': {price: 1000000, eff: 1000000}},
  skills: {'九转金身功': {price: 1e9, cond: 20, eff: 2}, '混沌决': {price: 1e12, cond: 40, eff: 3}},
  pets: [],
  player: {realm: 0, exp: 0, stone: 100, bag: {}, skills: {}}
};

/* ======== 通用 ======== */
const $ = id => document.getElementById(id);
const log = txt => { $('logBox').innerHTML += `<div>${new Date().toLocaleTimeString()} ${txt}</div>`; $('logBox').scrollTop = 1e9; };
const save = () => localStorage.xiuxian = JSON.stringify(DATA);
const load = () => { if (localStorage.xiuxian) { Object.assign(DATA, JSON.parse(localStorage.xiuxian)); } };

/* ======== 状态 ======== */
const cap = () => 100 * Math.pow(1.8, DATA.player.realm);
const update = () => {
  const c = cap();
  $('realmText').innerText = `境界：${DATA.realms[DATA.player.realm]}`;
  $('realmTitle').innerText = DATA.realms[DATA.player.realm];
  $('expText').innerText = `修为：${DATA.player.exp.toLocaleString()} / ${c.toLocaleString()}`;
  $('expBar').style.width = Math.min(100, DATA.player.exp / c * 100) + '%';
  $('stoneText').innerText = `灵石：${DATA.player.stone.toLocaleString()}`;
  $('petText').innerText = `灵宠：${DATA.pets.length > 0 ? DATA.pets[0].name : '无'}`;
  renderBag();
  renderMarket();
};

/* ======== 游戏逻辑 ======== */
const cultivate = () => {
  let base = 10 * Math.pow(1.5, DATA.player.realm);
  // 功法加成
  for (const [k, v] of Object.entries(DATA.player.skills)) {
    base *= DATA.skills[k].eff;
  }
  DATA.player.exp += Math.floor(base);
  while (DATA.player.exp >= cap()) {
    DATA.player.exp -= cap();
    DATA.player.realm++;
    log(`突破至 ${DATA.realms[DATA.player.realm]}`);
  }
  update();
  save();
};
const explore = () => {
  DATA.player.stone += Math.floor(Math.random() * 200) + 100;
  if (Math.random() < 0.3) addItem('筑基丹');
  if (Math.random() < 0.1 && DATA.player.realm >= 10 && DATA.pets.length < 3) {
    const petNames = ['灵狐', '玄龟', '朱雀', '青龙', '白虎'];
    const petName = petNames[Math.floor(Math.random() * petNames.length)];
    DATA.pets.push({ name: petName, level: 1 });
    log(`历练中发现了一只${petName}，成功收服！`);
  }
  log('历练结束');
  update();
  save();
};
const addItem = k => { DATA.player.bag[k] = (DATA.player.bag[k] || 0) + 1; };
const buyItem = k => {
  if (DATA.player.stone < DATA.items[k].price) { log('灵石不足'); return; }
  DATA.player.stone -= DATA.items[k].price;
  addItem(k);
  log(`购买 ${k}`);
  update();
  save();
};
const buySkill = k => {
  if (DATA.player.stone < DATA.skills[k].price) { log('灵石不足'); return; }
  if (DATA.player.realm < DATA.skills[k].cond) { log('境界不足'); return; }
  DATA.player.stone -= DATA.skills[k].price;
  DATA.player.skills[k] = true;
  log(`学习 ${k}`);
  update();
  save();
};
const useItem = k => {
  if (!DATA.player.bag[k]) return;
  DATA.player.bag[k]--;
  DATA.player.exp += DATA.items[k].eff;
  log(`使用 ${k}，获得 ${DATA.items[k].eff} 修为`);
  update();
  save();
};
const renderBag = () => {
  const b = $('bag');
  b.innerHTML = '';
  for (const [k, v] of Object.entries(DATA.player.bag)) {
    if (!v) continue;
    const d = document.createElement('span');
    d.className = 'item';
    d.innerText = `${k}×${v}`;
    d.onclick = () => useItem(k);
    b.appendChild(d);
  }
  // 渲染功法
  const s = document.createElement('div');
  s.className = 'row';
  s.style.marginTop = '10px';
  s.innerHTML = '<b>已学功法：</b>';
  let hasSkill = false;
  for (const [k] of Object.entries(DATA.player.skills)) {
    if (DATA.player.skills[k]) {
      s.innerHTML += ` ${k}`;
      hasSkill = true;
    }
  }
  if (!hasSkill) { s.innerHTML += ' 无'; }
  b.appendChild(s);
};
const renderMarket = () => {
  const m = $('marketList');
  m.innerHTML = '';
  for (const [k, v] of Object.entries({ ...DATA.items, ...DATA.skills })) {
    const card = document.createElement('div');
    card.className = 'card';
    if (DATA.items[k]) {
      card.innerHTML = `<b>${k}</b><br>${v.price.toLocaleString()} 灵石<br><button class="btn" onclick="buyItem('${k}')">购买</button>`;
    } else {
      card.innerHTML = `<b>${k}</b><br>${v.price.toLocaleString()} 灵石<br><button class="btn" onclick="buySkill('${k}')">学习</button>`;
    }
    m.appendChild(card);
  }
};
const resetGame = () => {
  if (confirm('是否重置游戏？')) {
    DATA.player = { realm: 0, exp: 0, stone: 100, bag: {}, skills: {} };
    DATA.pets = [];
    log('游戏已重置');
    update();
    save();
  }
};
const gmAddExp = () => {
  const v = Number($('expInput').value) || 0;
  DATA.player.exp += v;
  while (DATA.player.exp >= cap()) {
    DATA.player.exp -= cap();
    DATA.player.realm++;
    log(`突破至 ${DATA.realms[DATA.player.realm]}`);
  }
  update();
  save();
};
const gmAddStone = () => {
  const v = Number($('stoneInput').value) || 0;
  DATA.player.stone += v;
  update();
  save();
};
const gmAddItem = () => {
  const item = $('itemSelect').value;
  addItem(item);
  update();
  save();
};

/* ======== 页面切换 ======== */
function switchTab(id) {
  document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
  document.querySelectorAll('.tabbar button').forEach(b => b.classList.remove('active'));
  document.getElementById(id).classList.add('active');
  document.querySelector(`[onclick="switchTab('${id}')"]`).classList.add('active');
}

load();
update();
setInterval(save, 10000);
</script>
</body>
</html>